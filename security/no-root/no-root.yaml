AWSTemplateFormatVersion : '2010-09-09'
Description: Notifies root access
Resources:
  FnNoRootRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns: ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]
      Policies:
        - 
          PolicyName: "AllowPublishToCOE"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: '*' #TODO: Restrict to COETopic
  FnNoRoot:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs6.10
      Code: ./target/no-root.zip
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt FnNoRootRole.Arn
      Environment:
        Variables:
          COE_TOPIC: !ImportValue coe-topic
  FnNoRootPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FnNoRoot
      Principal: !Join [ ".", [ "logs", !Ref "AWS::Region", "amazonaws.com" ] ]
  NoRootFilter:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn: FnNoRootPermission
    Properties:
      DestinationArn: !GetAtt FnNoRoot.Arn
      FilterPattern: '{ $.userIdentity.type = "Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != "AwsServiceEvent" }'
      LogGroupName: !ImportValue audit-loggroup
